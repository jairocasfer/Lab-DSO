name: Lab DSO
on:
  push:
    branches:
      - main
jobs:
  Build-Deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write   
      contents: read 
      packages: write

    steps:
      - name: "obtener ultima version del codigo"
        uses: actions/checkout@v3

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::976954139503:role/capacitacion-jairo-2025
          aws-region: us-east-1
      
      - name: Instalar java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Hacer ejecutable el archivo mvnw
        run: chmod +x ./mvnw
          
      - name: Crea carpeta de los reportes
        run: mkdir 'reports'

      - name: Compilacion
        run: ./mvnw clean install -DskipTests

      - name: Evaluacion SCA
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: "WebGoat"
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --disableRetireJS


      - name: Running Horusec Security
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta
          horusec start -p="./" -o="json" -O="reports/horusec-report.json"

      - name: Ambiente de prueba con docker
        run: docker build -t scidevsecops/my-app:latest .

      - name: Evaluando con Aqua trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'scidevsecops/my-app:latest'
          format: 'table'
          output: 'reports/trivy-report.txt'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: 10m
      
      
      - name: "Obtener Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          rm -fr arachni-*.tar.gz

      - name: "Ejecutar contenedor"
        run: |
          docker run -d -p 8080:8080 -p 9090:9090 --name webgoat-container scidevsecops/my-app:latest
          sleep 20

      - name: Escaneo con Arachni
        run: |
          cd arachni-*/bin
          ./arachni http://172.17.0.2:8080/WebGoat \
          --output-verbose \
          --scope-include-subdomains \
          --report-save-path=../../reports/scan.afr

      - name: Generar reporte HTML con Arachni Reporter
        run: |
          cd arachni-*/bin
          ./arachni_reporter ../../reports/scan.afr --reporter=html:outfile=../../reports/scan.html
      
      - name: Detener contenedor de aplicacion
        run: docker stop webgoat-container

      - name: Comprimiendo la carpeta de los Reportes
        run: zip -r reports.zip reports

      - name: Reportes de Herramientas
        uses: actions/upload-artifact@v4
        with: 
          name: Reportes
          retention-days: 1
          path: reports.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"  
     
      - name: Create ECR Repository First
        working-directory: ./terraform
        run: |
          terraform init
          terraform apply -target=aws_ecr_repository.webgoat_repo -auto-approve

      # Paso 2: Login a ECR y pushear la imagen Docker
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/webgoat-repo:latest .
          docker push ${{ steps.login-ecr.outputs.registry }}/webgoat-repo:latest

      # Paso 3: Desplegar el resto de la infraestructura (EC2, Security Groups, etc.)
      - name: Deploy Full Infrastructure
        working-directory: ./terraform
        run: terraform apply -auto-approve

      # Esperar 2 minutos y destruir todo (opcional)
      - name: Wait 2 minutes before destruction
        run: sleep 120

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
        if: always()