name: Lab DSO

on:
  push:
    branches:
      - main

jobs:
  Build-Deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write   
      contents: read 
      packages: write

    steps:
      # ========== NOTIFICACI√ìN DE INICIO ==========
      - name: Notificar inicio del workflow
        uses: aliencube/microsoft-teams-actions@v0.9.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: "üü° Workflow Iniciado - Lab DSO"
          text: |
            **Repositorio:** ${{ github.repository }}
            **Rama:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Iniciado por:** ${{ github.actor }}
            **Estado:** Iniciando configuraci√≥n inicial...
            [Seguir Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # ========== CONFIGURACI√ìN INICIAL ==========
      - name: "obtener ultima version del codigo"
        uses: actions/checkout@v3

      - name: Notificar configuraci√≥n AWS
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Configurando AWS Credentials**\n**Paso:** Configuraci√≥n de AWS\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::976954139503:role/capacitacion-jairo-2025
          aws-region: us-east-1

      - name: Notificar instalaci√≥n Java
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Instalando Java 17**\n**Paso:** Setup del entorno de desarrollo\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Instalar java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Hacer ejecutable el archivo mvnw
        run: chmod +x ./mvnw
          
      - name: Crea carpeta de los reportes
        run: mkdir 'reports'

      # ========== COMPILACI√ìN Y BUILD ==========
      - name: Notificar inicio de compilaci√≥n
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Iniciando compilaci√≥n**\n**Paso:** Compilaci√≥n con Maven\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Compilacion
        run: ./mvnw clean install -DskipTests

      - name: Notificar compilaci√≥n exitosa
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **Compilaci√≥n exitosa**\n**Paso:** Maven build completado\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Notificar error en compilaci√≥n
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚ùå **ERROR en compilaci√≥n**\n**Paso fallido:** Maven build\n**Acci√≥n requerida:** Revisar dependencias y c√≥digo fuente\n[Ver logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== AN√ÅLISIS DE SEGURIDAD - SCA ==========
      - name: Notificar inicio an√°lisis SCA
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Iniciando an√°lisis SCA**\n**Herramienta:** OWASP Dependency Check\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Evaluacion SCA
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: "WebGoat"
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --disableRetireJS
            --disableCentral

      - name: Notificar SCA completado
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **An√°lisis SCA completado**\n**Herramienta:** OWASP Dependency Check\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== AN√ÅLISIS HORUSEC ==========
      - name: Notificar inicio Horusec
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Iniciando an√°lisis de seguridad**\n**Herramienta:** Horusec Security\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Running Horusec Security
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest-beta
          horusec start -p="./" -o="json" -O="reports/horusec-report.json"

      - name: Notificar Horusec completado
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **An√°lisis Horusec completado**\n**Herramienta:** Horusec Security\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== DOCKER BUILD ==========
      - name: Notificar build Docker
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Construyendo imagen Docker**\n**Paso:** Docker build\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Ambiente de prueba con docker
        run: docker build -t scidevsecops/my-app:latest .

      - name: Notificar Docker build exitoso
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **Imagen Docker construida**\n**Tag:** scidevsecops/my-app:latest\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== AN√ÅLISIS TRIVY ==========
      - name: Notificar inicio Trivy
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Escaneo de vulnerabilidades**\n**Herramienta:** Aqua Trivy\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Evaluando con Aqua trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'scidevsecops/my-app:latest'
          format: 'table'
          output: 'reports/trivy-report.txt'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: 10m

      - name: Notificar Trivy completado
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **Escaneo Trivy completado**\n**Herramienta:** Aqua Trivy\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== ARAchni SCAN ==========
      - name: Notificar descarga Arachni
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Preparando esc√°ner web**\n**Herramienta:** Arachni\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: "Obtener Arachni"
        run: |
          wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
          rm -fr arachni-*.tar.gz

      - name: Notificar inicio contenedor
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Iniciando aplicaci√≥n en contenedor**\n**Paso:** Docker run WebGoat\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: "Ejecutar contenedor"
        run: |
          docker run -d -p 8080:8080 -p 9090:9090 --name webgoat-container scidevsecops/my-app:latest
          sleep 20

      - name: Notificar escaneo Arachni
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Ejecutando esc√°ner web**\n**Herramienta:** Arachni\n**Target:** WebGoat\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Escaneo con Arachni
        run: |
          cd arachni-*/bin
          ./arachni http://172.17.0.2:8080/WebGoat \
          --output-verbose \
          --scope-include-subdomains \
          --report-save-path=../../reports/scan.afr

      - name: Notificar generaci√≥n reporte
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Generando reporte HTML**\n**Herramienta:** Arachni Reporter\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Generar reporte HTML con Arachni Reporter
        run: |
          cd arachni-*/bin
          ./arachni_reporter ../../reports/scan.afr --reporter=html:outfile=../../reports/scan.html
      
      - name: Detener contenedor de aplicacion
        run: docker stop webgoat-container

      - name: Notificar an√°lisis completado
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **An√°lisis de seguridad completado**\n**Todos los escaneos finalizados**\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== PROCESAMIENTO DE REPORTES ==========
      - name: Notificar compresi√≥n reportes
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Procesando reportes**\n**Paso:** Compresi√≥n y upload de artefactos\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Comprimiendo la carpeta de los Reportes
        run: zip -r reports.zip reports

      - name: Reportes de Herramientas
        uses: actions/upload-artifact@v4
        with: 
          name: Reportes
          retention-days: 1
          path: reports.zip

      # ========== DESPLIEGUE ECR ==========
      - name: Notificar inicio despliegue ECR
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Iniciando despliegue a ECR**\n**Paso:** Push a Amazon ECR\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Credencial AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::976954139503:role/capacitacion-jairo-2025
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t webgoat .

      - name: Tag image
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          docker tag webgoat:latest $aws_account_id.dkr.ecr.us-east-1.amazonaws.com/webgoat-repo:latest

      - name: Push to ECR
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          docker push $aws_account_id.dkr.ecr.us-east-1.amazonaws.com/webgoat-repo:latest

      - name: Notificar ECR exitoso
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **Despliegue ECR exitoso**\n**Imagen:** webgoat-repo:latest\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      # ========== TERRAFORM ==========
      - name: Notificar inicio Terraform
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üîµ **Configurando infraestructura**\n**Herramienta:** Terraform\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Instalar terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.4"

      - name: Iniciar terraform
        run: |
          cd terraform
          terraform init

      - name: Aplicar terraform
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Notificar Terraform completado
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "‚úÖ **Infraestructura desplegada**\n**Herramienta:** Terraform apply completado\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}

      - name: Borrar configuraciones nuevas
        run: echo "Aqui van las configuraciones que se borraran"

      # ========== NOTIFICACI√ìN FINAL ==========
      - name: Notificar resultado final del workflow
        if: always()
        uses: aliencube/microsoft-teams-actions@v0.9.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: "${{ job.status == 'success' && '‚úÖ Workflow Lab DSO Completado' || '‚ùå Workflow Lab DSO Fallido' }}"
          text: |
            **Resumen del workflow:**
            - **Estado final:** ${{ job.status }}
            - **Repositorio:** ${{ github.repository }}
            - **Rama:** ${{ github.ref_name }}
            - **Duraci√≥n total:** Aprox. 15-20 minutos
            - **Herramientas ejecutadas:** 6 an√°lisis de seguridad
            - **Despliegue:** ECR + Terraform

            **Pasos completados:**
            ‚úÖ Configuraci√≥n AWS y Java
            ‚úÖ Compilaci√≥n Maven
            ‚úÖ An√°lisis SCA (Dependency Check)
            ‚úÖ An√°lisis Horusec
            ‚úÖ Escaneo Trivy
            ‚úÖ Esc√°ner Arachni
            ‚úÖ Despliegue ECR
            ‚úÖ Infraestructura Terraform

            [Ver detalles completos](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # ========== MANEJO DE ERRORES GLOBAL ==========
      - name: Notificar error global del workflow
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "text": "üö® **ERROR CR√çTICO EN WORKFLOW**\n**Workflow:** Lab DSO\n**Estado:** Fallido\n**Acci√≥n requerida:** Revisar logs y corregir errores\n**URL de diagn√≥stico:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n**Tiempo:** $(date)"
          }' \
          ${{ secrets.TEAMS_WEBHOOK_URL }}